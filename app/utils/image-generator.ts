import satori from 'satori';
import { join } from 'path';
import * as fs from 'fs';
import { TokenAnalysis } from '../types';

const interRegular = fs.readFileSync(
  join(process.cwd(), 'public/fonts/Inter-Regular.ttf')
);

const interBold = fs.readFileSync(
  join(process.cwd(), 'public/fonts/Inter-Bold.ttf')
);

export async function generateAnalysisImage(analysis: TokenAnalysis): Promise<Buffer> {
  const svg = await satori(
    {
      type: 'div',
      props: {
        style: {
          background: 'linear-gradient(to bottom, #0f172a, #020617)',
          width: '1200px',
          height: '630px',
          display: 'flex',
          flexDirection: 'column',
          padding: '40px',
        },
        children: [
          {
            type: 'div',
            props: {
              style: {
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
              },
              children: [
                {
                  type: 'div',
                  props: {
                    style: {
                      fontSize: '48px',
                      fontWeight: 'bold',
                      color: '#ffffff',
                    },
                    children: analysis.market_data?.market_metrics?.pair?.base_token?.symbol || 'Token Analysis',
                  },
                },
                {
                  type: 'div',
                  props: {
                    style: {
                      fontSize: '64px',
                      fontWeight: 'bold',
                      color: getScoreColor(analysis.overall_score),
                    },
                    children: `${analysis.overall_score}/100`,
                  },
                },
              ],
            },
          },
          // Add key metrics
          {
            type: 'div',
            props: {
              style: {
                marginTop: '40px',
                display: 'grid',
                gridTemplateColumns: 'repeat(2, 1fr)',
                gap: '20px',
              },
              children: generateMetricsElements(analysis),
            },
          },
          // Add footer with AEGIS branding
          {
            type: 'div',
            props: {
              style: {
                marginTop: 'auto',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                color: '#64748b',
              },
              children: [
                {
                  type: 'span',
                  props: {
                    style: { fontSize: '24px' },
                    children: 'Generated by AEGIS AI',
                  },
                },
                {
                  type: 'span',
                  props: {
                    style: { fontSize: '20px' },
                    children: new Date().toLocaleDateString(),
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      width: 1200,
      height: 630,
      fonts: [
        {
          name: 'Inter',
          data: interRegular,
          weight: 400,
          style: 'normal',
        },
        {
          name: 'Inter',
          data: interBold,
          weight: 700,
          style: 'normal',
        },
      ],
    }
  );

  // Convert SVG to PNG using sharp
  const sharp = (await import('sharp')).default;
  return await sharp(Buffer.from(svg))
    .png()
    .toBuffer();
}

function getScoreColor(score: number): string {
  if (score >= 70) return '#10b981'; // green
  if (score >= 50) return '#f59e0b'; // yellow
  return '#ef4444'; // red
}

function generateMetricsElements(analysis: TokenAnalysis) {
  const metrics = [
    {
      label: 'Market Cap',
      value: formatCurrency(analysis.market_data?.market_cap || 0),
    },
    {
      label: 'Daily Volume',
      value: formatCurrency(analysis.market_data?.volume_24h || 0),
    },
    {
      label: 'Holders',
      value: formatNumber(analysis.holder_metrics?.total_holders || 0),
    },
    {
      label: 'Liquidity',
      value: formatCurrency(analysis.liquidity_metrics?.total_liquidity || 0),
    },
  ];

  return metrics.map((metric, index) => ({
    type: 'div',
    props: {
      style: {
        padding: '20px',
        background: 'rgba(255, 255, 255, 0.1)',
        borderRadius: '12px',
      },
      children: [
        {
          type: 'div',
          props: {
            style: {
              fontSize: '20px',
              color: '#94a3b8',
              marginBottom: '8px',
            },
            children: metric.label,
          },
        },
        {
          type: 'div',
          props: {
            style: {
              fontSize: '32px',
              color: '#ffffff',
              fontWeight: 'bold',
            },
            children: metric.value,
          },
        },
      ],
    },
  }));
}

function formatCurrency(value: number): string {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    notation: 'compact',
    maximumFractionDigits: 1,
  }).format(value);
}

function formatNumber(value: number): string {
  return new Intl.NumberFormat('en-US', {
    notation: 'compact',
    maximumFractionDigits: 1,
  }).format(value);
} 